#!/usr/bin/env python
import sys
import boto.ec2.autoscale
import k.aws.autoscale
import k.aws.config
import k.stdlib.logging.config
from optparse import OptionParser


def get_launch_configs(conn):
	configs = {}
	for config in k.aws.autoscale.get_all_launch_configs(conn):
		configs[config.name] = config
	return configs

def cull_configs(conn):
	configs = get_launch_configs(conn)
	for group in k.aws.autoscale.get_all_groups(conn):
		if group.launch_config_name in configs.keys():
			del configs[group.launch_config_name]
		else:
			print group
	for key in configs:
		print key

def parse_options():
	usage = "usage: %prog [options]\n\n"
	usage += "culls unused asg launch configs from an account.\n"

	parser = OptionParser(usage=usage)
	k.stdlib.logging.config.get_logging_options(parser)
	k.aws.config.get_aws_options(parser)
	k.aws.config.get_region_option(parser)
	return parser

def main():
	(options, args) = parse_options().parse_args()
	k.stdlib.logging.config.configure_logging(options)
	region_creds = k.aws.config.get_region_keys(options)
	conn = boto.ec2.autoscale.connect_to_region(
			region_creds.region_name,
			aws_access_key_id=region_creds.creds.access,
			aws_secret_access_key=region_creds.creds.secret,
			security_token=region_creds.creds.token)
	cull_configs(conn)

if __name__ == '__main__':
	main()


# Local Variables: 
# mode: python
# tab-width: 4
# indent-tabs-mode: t
# whitespace-mode: t
# End:             
