#!/usr/bin/env python
import sys
import boto.ec2.autoscale
import k.aws.autoscale
import k.aws.config
import k.stdlib.logging.config
from optparse import OptionParser


def get_launch_configs(conn):
	configs = {}
	for config in k.aws.autoscale.get_all_launch_configs(conn):
		configs[config.name] = config
	return configs

def get_groups_with_key(conn, configs, old_key, name_filter):
	old_key_groups = []
	for group in k.aws.autoscale.get_all_groups(conn):
		config = configs[group.launch_config_name]
		if name_filter:
			if group.name.find(name_filter) > -1:
				if config.key_name == old_key:
					old_key_groups.append((group, config))
		else:
			if config.key_name == old_key:
				old_key_groups.append((group, config))
	return old_key_groups

def list_groups(conn, old_key, name_filter):
	configs = get_launch_configs(conn)
	groups = get_groups_with_key(conn, configs, old_key, name_filter)
	for g in groups:
		print g[0].name

def replace_config(conn, old_key, new_key, name_filter):
	configs = get_launch_configs(conn)
	groups = get_groups_with_key(conn, configs, old_key, name_filter)
	for (group, config) in groups:
		new_name = config.name + "-rekey"
		if not new_name in configs:
			launch_config = {
				'name': new_name,
				'image_id': config.image_id,
				'key_name': new_key,
				'security_groups': config.security_groups,
				'user_data': config.user_data,
				'instance_type': config.instance_type,
				'instance_monitoring': config.instance_monitoring.enabled,
				'ebs_optimized': config.ebs_optimized
			}
			if config.kernel_id and config.kernel_id != '':
				launch_config['kernel_id'] = config.kernel_id
			if config.ramdisk_id and config.ramdisk_id != '':
				launch_config['ramdisk_id'] = config.ramdisk_id
			if len(config.block_device_mappings) > 0:
				launch_config['block_device_mappings'] = config.block_device_mappings
			if config.spot_price:
				launch_config['spot_price'] = config.spot_price,
			if config.instance_profile_name:
				launch_config['instance_profile_name'] = config.instance_profile_name,
			new_config = boto.ec2.autoscale.launchconfig.LaunchConfiguration(conn, **launch_config)
			conn.create_launch_configuration(new_config)
			configs[new_name] = new_config
		group.launch_config_name = new_name
		group.update()
		print group.name

def parse_options():
	usage = "usage: %prog [options] <old-key> [new-key] \n\n"
	usage += "rewires autoscale configs to change out an ssh key.\n"
	usage += "If only old key is passed in, prints all autoscale groups with a config that uses that key"

	parser = OptionParser(usage=usage)
	k.stdlib.logging.config.get_logging_options(parser)
	k.aws.config.get_aws_options(parser)
	k.aws.config.get_region_option(parser)
	parser.add_option(
		"-f", "--filter", dest="filter",
		help="Only work on autoscale groups containing [filter] in name")
	return parser

def main():
	(options, args) = parse_options().parse_args()
	k.stdlib.logging.config.configure_logging(options)
	region_creds = k.aws.config.get_region_keys(options)
	if len(args) < 1:
		sys.stderr.write("<old-key> required\n")
		sys.exit(1)
	conn = boto.ec2.autoscale.connect_to_region(
			region_creds.region_name,
			aws_access_key_id=region_creds.creds.access,
			aws_secret_access_key=region_creds.creds.secret,
			security_token=region_creds.creds.token)
	if len(args) == 1:
		list_groups(conn, args[0], options.filter)
	if len(args) == 2:
		replace_config(conn, args[0], args[1], options.filter)

if __name__ == '__main__':
	main()


# Local Variables: 
# mode: python
# tab-width: 4
# indent-tabs-mode: t
# whitespace-mode: t
# End:             
