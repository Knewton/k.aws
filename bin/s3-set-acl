#!/usr/bin/env python
import os
import logging
import sys
import boto
import k.aws.config
import k.aws.s3
import k.stdlib.logging.config
from boto import exception
from boto.s3.key import Key
from boto.s3.acl import CannedACLStrings
from boto.s3.bucket import Bucket
from optparse import OptionParser

def acl_it(bucket, prefix, acl, verbose=False, no_action=False):
	keys = bucket.list(prefix=prefix)
	if acl not in CannedACLStrings:
		raise ValueError, "ERROR: The acl '{0}' is not a valid ACL (see boto.s3.acl.CannedACLStrings)".format(acl)

	for k in keys:
		if verbose or no_action:
			if no_action:
				prefix = "Would do: "
			else:
				prefix = ""
			sys.stdout.write("{0}Set ACL {1} on s3://{2}/{3}\n".format(prefix, acl, bucket.name, k.name))
		if not no_action:
			k.set_canned_acl(acl)
			

def main():
	parser = optionParser()
	(options, args) = parser.parse_args()
	k.stdlib.logging.config.configure_logging(options)

	if options.canned_acl is None:
		raise ValueError, "You need to provide an ACL"

	try:
		creds = k.aws.config.get_keys(options)
		bucket_name = k.aws.s3.get_bucket_name(options)
		conn = k.aws.s3.connect(
			creds, bucket_name=bucket_name, ordinary=options.ordinary)
		bucket = k.aws.s3.get_bucket(conn, options)
		acl_it(bucket, args[0], options.canned_acl, verbose=options.verbose, no_action=options.no_action)
	except boto.exception.BotoServerError, e:
		sys.stderr.write(str(e) + "\n")
		sys.exit(1)
	except ValueError as e:
		sys.stderr.write(str(e) + "\n")
		sys.exit(2)

def optionParser():
	usage = "usage: %prog [options] [key prefix]\n\n"
	usage += "Sets an acl on keys matching a pattern in s3 bucket"

	parser = OptionParser(usage=usage)
	k.stdlib.logging.config.get_logging_options(parser)
	k.aws.config.get_aws_options(parser)
	k.aws.config.get_verbose_option(parser)
	k.aws.s3.get_s3_options(parser)
	parser.add_option(
		"-c", "--canned-acl", dest="canned_acl", default=None,
		help="See boto.s3.acl.CannedACLStrings for valid strings")
	parser.add_option(
		"-n", "--no-action", dest="no_action", default=False, action="store_true",
		help="Just describe the actions to be taken, make no change")

	return parser

if __name__=='__main__':
	main()

# Local Variables:
# tab-width: 4
# indent-tabs-mode: t
# End:
